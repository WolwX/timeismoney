PROJECT REFERENCE FILE
================================================================================
DERNIÈRE MISE À JOUR : 19/10/2025
BUT DU PROJET : Application Flutter de chronométrage financier ("Time Is Money") affichant les gains en temps réel basés sur un taux horaire paramétrable avec support multi-timer, base de données internationale de salaires minimums, système de notifications complet et animations de célébration.
CONTEXTE TECHNIQUE : 
    - Framework : Flutter
    - Gestion d'état : Provider (ChangeNotifier)
    - Persistance locale : shared_preferences (utilisation via une abstraction `IStorageService`)
    - Notifications : flutter_local_notifications pour push locales
    - Architecture : MVVM avec models, controllers, widgets réutilisables

--------------------------------------------------------------------------------
1. ÉTAT ACTUEL DE L'APPLICATION (V. 1.4.5, pubspec.yaml: 1.4.5+191025)
--------------------------------------------------------------------------------

FONCTIONNALITÉS COMPLÈTES :


**NOUVEAUTÉS MAJEURES EN V1.4.5 :**
* Améliorations majeures du dialogue Planning (espacement augmenté, centrage de la zone timer, texte "Enregistrer sur le timer")
* Icônes cohérentes sur tous les boutons de dialogue (Fermer/Annuler/Enregistrer avec icônes appropriées)
* Page "À Propos" complètement refondue avec titre complet, description détaillée, crédits développeur et liens utiles
* Formulaire de contact intégré remplaçant l'ancien dialogue d'aide (email pré-rempli, envoi via client mail)
* Réorganisation des presets loterie dans la catégorie Dreamlist avec sous-catégories "Métiers de Rêve" et "Gains Loterie"
* Formatage des nombres avec séparateurs de milliers (100 000€ au lieu de 100000€) dans toute l'application
* Fonction utilitaire formatNumberWithSpaces() pour cohérence et lisibilité

**NOUVEAUTÉS MAJEURES EN V1.4.3 :**
* Système de notifications push locales complet (timer terminé, jalons de gains, rappels horaires)
* Préférences de notifications configurables par l'utilisateur
* Animation de célébration avec particules smiley quand timer atteint zéro
* Enregistrement automatique des célébrations en arrière-plan
* Nouvelle catégorie "Dreamlist" avec jobs de rêve motivants (Kylian Mbappé, Astronaut NASA, etc.)
* Organisation en accordéon complète des presets avec ExpansionTile
* Bordure rouge 0.5px quand timer atteint zéro (feedback visuel)
* Mode immersif Android pour éviter chevauchement des barres système
* Corrections techniques pour animation minuteur sur Flutter Chrome

**NOUVEAUTÉS MAJEURES EN V1.4.1 :**
* Affichage des presets par catégorie sous forme de menu accordéon (ExpansionPanelList)
* Amélioration de l’ergonomie des dialogues de presets (espacement, compacité)
* Correction de détails visuels sur les dialogues de réglages

**BASE DE DONNÉES INTERNATIONALE :**
1.  **36 Pays avec Salaires Minimums Réels :**
    * Organisation géographique : Europe (14), Pays Riches (3), Amériques (6), Asie (7), Afrique (6)
    * Fourchette complète : 0.10 $/h (Venezuela) à 24.50 CHF/h (Suisse) - ratio 1:245
    * Nouveaux pays : Luxembourg, Irlande, Islande, Andorre, Venezuela, Ouganda, Soudan du Sud, Bangladesh, Pakistan, Nigeria

2.  **Taux NET Spécifiques par Pays :**
    * Chaque pays a son pourcentage BRUT → NET basé sur sa fiscalité réelle
    * Fourchette : 68% (Belgique) à 95% (Thaïlande, Ouganda, Soudan du Sud)
    * Application automatique lors de la sélection d'un preset pays
    * Exemples : France 77.6%, Suisse 88%, Royaume-Uni 87%, Japon 80%

3.  **Heures Hebdomadaires Réelles par Pays :**
    * Heures de travail légales hebdomadaires par pays
    * Fourchette : 35h/semaine (France) à 52h/semaine (Corée du Sud)
    * Calcul dynamique : hoursPerMonth = (weeklyHours × 52) / 12, hoursPerYear = weeklyHours × 52
    * Affichage personnalisé : "Estimations Annuelles (Base XXh/sem.)"
    * Exemples : France 35h (1820h/an), Suisse 42h (2184h/an), Corée 52h (2704h/an)

**ÉDITION MANUELLE DU TEMPS :**
4.  **Interface d'Édition Interactive :**
    * Clic sur l'affichage du temps (quand timer en pause) ouvre un dialogue
    * 3 champs de saisie : Heures, Minutes, Secondes
    * Format visuel avec séparateurs `:` entre les champs
    * Icône d'édition (✏️) visible uniquement sur timers arrêtés

5.  **Validation et Persistence :**
    * Validation automatique : minutes et secondes doivent être < 60
    * Méthode SingleTimer.setManualTime(Duration) met à jour état complet
    * Recalcul automatique des gains après modification
    * Callback onTimeEdited déclenche persistence via MultiTimerController.editTimerTime()
    * Message de confirmation visuel

**SYSTÈME MULTI-TIMER (V1.2.0) :**
6.  **Gestion de 2 Timers Indépendants :** L'application permet de créer jusqu'à 2 chronomètres simultanés avec configurations différentes.
7.  **Contrôles Individuels :** Chaque timer possède ses propres boutons Start/Stop/Reset + édition du temps.
8.  **Synchronisation :** Zone centrale avec boutons pour démarrer/arrêter/réinitialiser tous les timers simultanément.
9.  **Gestion des Timers :** Interface pour ajouter, supprimer et activer/désactiver les timers (max 2).
10. **Distinction Visuelle :** 
    * Timer 1 : Bordure cyan (#00BCD4)
    * Timer 2 : Bordure orange (#FF9800)
    * Hauteurs fixes pour alignement parfait des colonnes
11. **Layout Adaptatif :**
    * 0 timers actifs : Message de bienvenue
    * 1 timer actif : Affichage plein écran (mode full)
    * 2 timers actifs : 2 colonnes avec zone de contrôle centrale (mode compact)

**FONCTIONNALITÉS HÉRITÉES :**
12. **Chronomètre et Calcul en Temps Réel :** Chaque Timer incrémente le temps et calcule les gains (Brut → Net via facteur configurable).
13. **Personnalisation du Taux :** Configuration indépendante du taux horaire, devise, pourcentage NET, heures hebdomadaires pour chaque timer.
14. **Préréglages de Taux :** Liste de 36 presets internationaux + presets professionnels (via `lib/models/preset_rates.dart`) avec affichage du nom du preset (ex: "SMIC Français", "Salaire Minimum Suisse").
15. **Calcul Brut/Net Paramétrable :**
    * Pourcentage de conversion NET/BRUT stocké et réglable par utilisateur
    * Valeurs par défaut par pays (France 77.6%, Belgique 68%, Thaïlande 95%)
    * Net = Brut × (TauxNet / 100)
16. **Affichage des Gains :**
    * Gain NET : Compteur principal (grosse police, Jaune/Or)
    * Gain BRUT : Référence secondaire (Vert)
17. **Estimations :** Estimations Mensuelles et Annuelles (Brut et Net) calculées dynamiquement selon les heures hebdomadaires du pays.

**SYSTÈME DE NOTIFICATIONS COMPLET (V1.4.3) :**
18. **Notifications Push Locales :** 3 types configurables (timer terminé, jalons de gains, rappels horaires)
19. **Préférences Utilisateur :** Activation/désactivation individuelle via dialogue dédié dans réglages
20. **Permissions Automatiques :** Gestion des autorisations Android/iOS avec flutter_local_notifications
21. **Canaux Distincts :** Organisation optimale avec canaux de notification séparés

**ANIMATION DE CÉLÉBRATION (V1.4.3) :**
22. **Particules Smiley :** Animation de célébration quand timer atteint zéro
23. **Enregistrement Arrière-Plan :** Capture automatique des célébrations pour timers actifs
24. **Lecture Automatique :** Déclenchement au retour dans l'app (WidgetsBindingObserver)
25. **Préférence Utilisateur :** Activation/désactivation via dialogue notifications
26. **Gestion Intelligente :** CelebrationManager pour file d'attente des animations

**CATÉGORIE DREAMLIST (V1.4.3) :**
27. **Jobs de Rêve :** Nouvelle catégorie avec salaires motivants (Kylian Mbappé, Astronaut NASA, Film Director Hollywood, Professional Gamer)
28. **Icône Distinctive :** ✨ pour différencier de la catégorie Rapides
29. **ExpansionTile :** Organisation en accordéon pour navigation améliorée
30. **Motivation :** Salaires élevés pour maintenir l'engagement utilisateur

**AMÉLIORATIONS VISUELLES (V1.4.3) :**
31. **Bordure Dynamique :** Rouge 0.5px quand timer atteint zéro, 0.2px normal
32. **Feedback Visuel :** _getBorderColor() et _getBorderWidth() dans TimerDisplay
33. **Mode Immersif Android :** SystemChrome.setEnabledSystemUIMode(SystemUiMode.immersiveSticky)
34. **Support Encoches :** android.notch_support="true" dans AndroidManifest.xml

**AMÉLIORATIONS UI ET FONCTIONNALITÉS (V1.4.5) :**
35. **Dialogue Planning Amélioré :** Espacement augmenté, centrage zone timer, texte "Enregistrer sur le timer"
36. **Icônes Cohérentes :** Boutons Fermer/Annuler/Enregistrer avec icônes appropriées sur tous les dialogues
37. **Page À Propos Refondue :** Titre complet, description détaillée, crédits développeur, liens utiles
38. **Formulaire Contact :** Remplacement dialogue aide, email pré-rempli, envoi via client mail
39. **Presets Loterie Réorganisés :** Déplacement dans Dreamlist avec sous-catégories "Métiers de Rêve" et "Gains Loterie"
40. **Formatage Nombres :** Séparateurs milliers (100 000€), fonction formatNumberWithSpaces() pour cohérence

FICHIERS CLÉS ET RÔLES :

**MODELS :**
* `lib/models/single_timer.dart` : Modèle encapsulant l'état d'un timer
    - Propriétés : id, name, isActive, isRunning, elapsedDuration, hourlyRate, currency, rateTitle, netRatePercentage, weeklyHours
    - Méthodes : calculateGains(), recalculateTime(), setManualTime(Duration), toJson()/fromJson()
    - NOUVEAU v1.3.0 : setManualTime() pour édition manuelle
    - Rôle : Représentation complète d'un timer avec toutes ses métadonnées

* `lib/models/preset_rates.dart` : Définitions des presets de taux horaires
    - Structure : PresetRate(title, rate, currency, category, netRatePercentage, weeklyHours)
    - NOUVEAU v1.3.0 : Champs netRatePercentage (68-95%) et weeklyHours (35-52h)
    - 36 pays avec salaires minimums internationaux + presets professionnels
    - Organisation : Europe (14), Pays Riches (3), Amériques (6), Asie (7), Afrique (6), Standard, Santé, Tech/IT, Politique, Sport, Célébrités
    - Rôle : Base de données de référence mondiale

**CONTROLLERS :**
* `lib/providers/multi_timer_controller.dart` : Gère la collection de timers (List<SingleTimer>)
    - Contrôles Individuels : startTimer(index), stopTimer(index), resetTimer(index), editTimerTime(index)
    - Contrôles Globaux : startAllTimers(), stopAllTimers(), resetAllTimers(), synchronizeTimers()
    - Gestion : addTimer(), removeTimer(), toggleTimerActive(index)
    - Configuration : setHourlyRate(), updateHourlyRateOnly(), setCurrency(), setRateTitle(), setNetRatePercentage(), setWeeklyHours()
    - NOUVEAU v1.3.0 : editTimerTime(index) pour persister les éditions manuelles
    - Persistance : saveTimers(), loadTimers() avec JSON serialization
    - Rôle : État global, orchestration, persistance

* `lib/providers/timer_controller.dart` (LEGACY) : Ancien controller pour référence historique, non utilisé en v1.3.0

**WIDGETS :**
* `lib/widgets/timer_display.dart` : Widget réutilisable affichant un timer
    - Props : timer (SingleTimer), timerIndex, isCompact, callbacks (onStart, onStop, onReset, onTimeEdited)
    - NOUVEAU v1.3.0 :
        * GestureDetector sur affichage du temps (clic ouvre dialogue)
        * _showEditTimeDialog() : dialogue avec 3 champs (H:M:S), validation, persistence
        * onTimeEdited callback pour déclencher sauvegarde
        * Calculs dynamiques : hoursPerMonth = (weeklyHours × 52) / 12, hoursPerYear = weeklyHours × 52
        * Affichage dynamique : "Base ${hoursPerWeek}h/sem." au lieu de fixe "Base 35h/sem."
        * Icône edit (✏️) visible uniquement si timer en pause
    - Render : Bordure color-coded, SizedBox hauteurs fixes, formatDuration adaptatif
    - Colors : Timer 1 = cyan, Timer 2 = orange
    - Rôle : Affichage réutilisable avec édition interactive

* `lib/widgets/celebration_animation.dart` : Animation particules smiley (NOUVEAU v1.4.3)
    - CustomPainter : Système de particules avec physique
    - Controller : AnimationController pour séquences
    - Playback : Déclenchement depuis CelebrationManager

* `lib/widgets/footer_bar.dart` : Barre de footer avec version et crédits
    - Lecture version depuis pubspec.yaml (rootBundle), fallback PackageInfo
    - Format : v1.5.0.191025
    - Rôle : Affichage version et crédits

* `lib/utils.dart` : Fonctions utilitaires (NOUVEAU v1.5.0)
    - formatNumberWithSpaces(double, int) : Formatage nombres avec séparateurs milliers (100 000.00)
    - Utilisation : Cohérence dans toute l'application pour montants monétaires

**SCREENS :**
* `lib/screens/home_screen.dart` : Écran principal avec layout adaptatif
    - MODIFIÉ v1.3.0 : Tous les TimerDisplay reçoivent onTimeEdited callback
    - Layout : _buildNoTimersView() / _buildSingleTimerView() / _buildMultiTimerView()
    - Zone Centrale : 60px width, boutons sync verticaux
    - Rôle : Point d'entrée principal, orchestration UI

* `lib/screens/settings_screen.dart` : Configuration et gestion des timers
    - MODIFIÉ v1.3.0 : _applyPreset() applique 4 paramètres (rate, currency, netRatePercentage, weeklyHours)
    - Sections : Timer Management (add/remove/toggle), Settings (per-timer)
    - Rôle : Configuration complète de tous les paramètres

* `lib/screens/splash_screen.dart` : Écran d'accueil avec hourglass animé
* `lib/screens/settings_screen_backup.dart` : Backup ancien settings pour référence

**SERVICES :**
* `lib/services/storage_service.dart` : Abstraction persistance (IStorageService + SharedPreferencesStorage)
* `lib/services/notification_service.dart` : Gestion notifications push locales (NOUVEAU v1.4.3)
    - Méthodes : showTimerFinishedNotification(), showGainMilestoneNotification(), showPeriodicReminderNotification()
    - Permissions : Gestion automatique Android/iOS
    - Canaux : Organisation par type de notification
* `lib/services/celebration_manager.dart` : Gestion animations célébration (NOUVEAU v1.4.3)
    - Persistence : File d'attente célébrations en SharedPreferences
    - Playback : Déclenchement automatique au retour app
    - Queue : addCelebration(), consumeNextCelebration(), hasPendingCelebrations

**TESTS :**
* `test/timer_controller_test.dart` : Tests legacy TimerController avec FakeStorage
* `test/test_helpers/` : Utilities pour tests (mocks, fakes)

CHOIX D'IMPLÉMENTATION NOTABLES :
* **Architecture MVVM :** Séparation claire Models (SingleTimer, PresetRate) → Controllers (MultiTimerController) → Views (TimerDisplay, HomeScreen)
* **Persistance JSON :** Sérialisation complète de tous les timers avec netRatePercentage et weeklyHours
* **Calculs Dynamiques :** Remplacement des constantes fixes (1820h/an) par calculs basés sur weeklyHours par timer
* **Édition Interactive :** GestureDetector + AlertDialog pour modification directe du temps
* **Validation Input :** Contrôles automatiques (minutes/secondes < 60) avant application
* **Hauteurs Fixes :** SizedBox pour alignement parfait multi-colonnes
* **Color Coding :** Bordures cyan/orange pour distinction immédiate
* **Métadonnées Pays :** Chaque preset contient taux, devise, % NET, heures/semaine pour calculs précis
* **Isolation Fonctionnelle :** updateHourlyRateOnly() pour éviter écrasement de rateTitle

DONNÉES INTERNATIONALES (V1.3.0) :

**Top 5 Pays Riches (Salaire Minimum) :**
- Suisse : 24.50 CHF/h, 88% NET, 42h/sem
- Luxembourg : 14.50 €/h, 85% NET, 40h/sem
- Australie : 14.00 A$/h, 83% NET, 38h/sem
- Islande : 13.85 €/h, 84% NET, 40h/sem
- Nouvelle-Zélande : 13.20 NZ$/h, 85% NET, 40h/sem

**Top 5 Pays Pauvres (Salaire Minimum) :**
- Venezuela : 0.10 $/h, 88% NET, 40h/sem
- Soudan du Sud : 0.15 $/h, 95% NET, 48h/sem
- Ouganda : 0.25 $/h, 95% NET, 48h/sem
- Bangladesh : 0.35 $/h, 92% NET, 48h/sem
- Pakistan : 0.40 $/h, 90% NET, 48h/sem

**Extrêmes Fiscaux :**
- Taux NET le plus bas : Belgique 68% (taxes élevées)
- Taux NET le plus haut : Thaïlande, Ouganda, Soudan du Sud 95% (taxes faibles)

**Extrêmes Horaires :**
- Heures min : France 35h/semaine (1820h/an, 151.67h/mois)
- Heures max : Corée du Sud 52h/semaine (2704h/an, 226.67h/mois) - soit +48.6%

--------------------------------------------------------------------------------
2. PROCHAINES ÉTAPES (PRIORITÉS)
--------------------------------------------------------------------------------

**PRIORITÉ 1 - IMPORT/EXPORT DE CONFIGURATIONS (V1.4.0 PLANIFIÉ) :**
* **Objectif :** Permettre à l'utilisateur de sauvegarder et partager ses configurations de timers.
* **Détails Attendus :**
    - Export : Générer un fichier JSON contenant tous les timers (rates, currency, rateTitle, etc.).
    - Import : Charger un fichier JSON pour restaurer des configurations.
    - Interface : Boutons dans SettingsScreen pour Export/Import.
    - Validation : Vérifier la structure JSON importée avant application.
* **Bénéfice :** Sauvegarde externe, partage entre appareils, réutilisation de configurations complexes.

**PRIORITÉ 2 - HISTORIQUE DES SESSIONS (V1.3.0 OU V1.4.0) :**
* **Objectif :** Journaliser et afficher l'historique des sessions de travail.
* **Détails Attendus :**
    - Modèle Session : Date, Durée, Taux Horaire, Nom du Timer, Gain Brut Final, Gain Net Final.
    - Sauvegarde : Enregistrer sessions terminées via IStorageService (liste JSON).
    - Interface : Écran HistoryScreen pour visualiser, filtrer, exporter (CSV/JSON).
    - Déclenchement : Enregistrement automatique au RESET (si durée > 0).
* **Bénéfice :** Suivi des activités, analyses temporelles, export pour comptabilité.

**FONCTIONNALITÉS COMPLÉTÉES EN V1.4.3 :**
* ✅ **Système de Notifications Complet :** Timer terminé, jalons de gains, rappels horaires avec préférences configurables
* ✅ **Animation de Célébration :** Particules smiley avec enregistrement arrière-plan et lecture automatique
* ✅ **Catégorie Dreamlist :** Jobs de rêve motivants avec organisation en accordéon
* ✅ **Améliorations Visuelles :** Bordure rouge à zéro, mode immersif Android
* ✅ **Corrections Techniques :** Animation minuteur Flutter Chrome, logique arrêt timer améliorée

**FONCTIONNALITÉS COMPLÉTÉES EN V1.5.0 :**
* ✅ **Dialogue Planning Amélioré :** Espacement augmenté, centrage zone timer, texte "Enregistrer sur le timer"
* ✅ **Icônes Cohérentes :** Boutons Fermer/Annuler/Enregistrer avec icônes sur tous les dialogues
* ✅ **Page À Propos Refondue :** Titre complet, description détaillée, crédits développeur, liens utiles
* ✅ **Formulaire Contact Intégré :** Remplacement dialogue aide, email pré-rempli, envoi client mail
* ✅ **Presets Loterie Réorganisés :** Déplacement dans Dreamlist avec sous-catégories
* ✅ **Formatage Nombres :** Séparateurs milliers (100 000€), fonction utilitaire pour cohérence

**AMÉLIORATIONS FUTURES :**
* Support de plus de 2 timers simultanés (grille responsive).
* Mode sombre/clair personnalisable.
* Graphiques d'évolution des gains (dashboard analytics).
* Intégration calendrier pour planning des sessions.
* Export d'historique en CSV/JSON depuis HistoryScreen.

--------------------------------------------------------------------------------
3. NOTES OPÉRATIONNELLES / VERSIONING
--------------------------------------------------------------------------------

**FORMAT DE VERSION :**
* Schéma : `MAJOR.MINOR.PATCH+DDMMYY`
* Exemple : `1.5.0+191025` (version 1.5.0, build du 19 octobre 2025)
* Fichier source : `pubspec.yaml` (property `version`)

**AFFICHAGE VERSION :**
* FooterBar suit cette priorité : explicit param → pubspec.yaml asset → PackageInfo.
* Format affiché : `v1.5.0.191025` (le + est remplacé par . pour lisibilité).
* Splash screen affiche une version simplifiée : `v1.4`.3.

**WORKFLOW DE MISE À JOUR :**
1. Modifier `version` dans `pubspec.yaml` (ex: `1.4.3+171025` → `1.5.0+191025`).
2. Exécuter `flutter pub get` pour empaqueter pubspec.yaml comme asset.
3. Mettre à jour CHANGELOG.txt avec les nouvelles fonctionnalités.
4. Mettre à jour version hardcodée dans splash_screen.dart si nécessaire.
5. Rebuild complet (`flutter clean && flutter build`) pour inclure nouveaux assets.

**SCRIPT AUTOMATIQUE :**
* Un script `scripts/update_version.ps1` est fourni pour incrémenter automatiquement le build number à partir du nombre de commits Git et relancer `flutter pub get`.

**DEBUGGING VERSION :**
* Si la version ne s'affiche pas correctement, vérifier :
    1. pubspec.yaml est bien listé dans `flutter.assets`.
    2. `flutter pub get` a été exécuté après modification.
    3. Rebuild complet effectué (éviter hot reload pour changements d'assets).
    4. Cache navigateur vidé pour tests web.

--------------------------------------------------------------------------------
4. ARCHITECTURE TECHNIQUE DÉTAILLÉE
--------------------------------------------------------------------------------

**MODÈLES (lib/models/) :**
* `single_timer.dart` : 
    - Properties : id, name, isActive, isRunning, elapsedDuration, hourlyRate, currency, rateTitle, netGrossRatio, estimatedMonthlyHours, estimatedAnnualHours
    - Methods : calculateGains(), recalculateTime(), toJson(), fromJson()
    - Rôle : Encapsuler l'état complet d'un timer individuel
* `preset_rates.dart` :
    - Liste statique de PresetRate (name, hourlyRate, currency, netGrossRatio)
    - Catégories : Sport, Tech, Médecine, Personnalisé
    - Rôle : Fournir des templates de configuration rapide

**CONTROLLERS (lib/providers/) :**
* `multi_timer_controller.dart` :
    - État : List<SingleTimer> _timers (max 2), Timer _ticker
    - Contrôles Individuels : startTimer(index), stopTimer(index), resetTimer(index)
    - Contrôles Globaux : startAllTimers(), stopAllTimers(), resetAllTimers(), synchronizeTimers()
    - Gestion : addTimer(), removeTimer(), toggleTimerActive(index)
    - Configuration : setHourlyRate(), updateHourlyRateOnly(), setCurrency(), setRateTitle(), setNetGrossRatio(), setEstimatedHours()
    - Persistance : _loadFromStorage(), _saveToStorage() avec JSON serialization
    - Rôle : État global, orchestration, persistance

**WIDGETS (lib/widgets/) :**
* `timer_display.dart` :
    - Props : timer (SingleTimer), timerIndex (pour colors), isCompact (layout), callbacks
    - Render : Bordure color-coded, SizedBox hauteurs fixes, formatDuration adaptatif
    - Colors : Timer 1 = cyan (#00BCD4), Timer 2 = orange (#FF9800)
    - Rôle : Affichage réutilisable d'un timer avec style uniforme
* `footer_bar.dart` :
    - Props : version (optional explicit), showVersion (bool)
    - Logique : Lecture pubspec.yaml via rootBundle, fallback vers PackageInfo
    - Rôle : Affichage version et crédits
* `animated_hourglass.dart` :
    - CustomPainter animé pour sablier
    - Rôle : Élément visuel splash screen
* `falling_currency.dart` :
    - Particules animées de symboles monétaires
    - Optimisé pour performance (moins d'instances, update rate réduit)
    - Rôle : Fond décoratif animé

**SCREENS (lib/screens/) :**
* `home_screen.dart` :
    - Layout : _buildNoTimersView() / _buildSingleTimerView() / _buildMultiTimerView()
    - Logique : Switch basé sur activeTimers.length
    - Zone Centrale : 60px width, boutons sync verticaux
    - Rôle : Point d'entrée principal, orchestration UI
* `settings_screen.dart` :
    - Sections : Timer Management, Settings (per-timer)
    - Timer Management : Liste avec add/remove, bordures color-coded
    - Settings : Configuration par timer (rate, currency, net/gross, estimates)
    - Rôle : Configuration et gestion des timers
* `splash_screen.dart` :
    - Affichage : Hourglass animé + version + optionnel FallingCurrency
    - Navigation : Automatique vers HomeScreen après délai
    - Rôle : Écran d'accueil avec branding

**SERVICES (lib/services/) :**
* `storage_service.dart` :
    - Interface : IStorageService (getString, setString, remove, clear)
    - Implémentation : SharedPreferencesStorage
    - Rôle : Abstraction persistance pour testabilité

**TESTS (test/) :**
* `timer_controller_test.dart` : Tests legacy TimerController avec FakeStorage
* `test_helpers/` : Utilities pour tests (mocks, fakes)
* Rôle : Validation comportements critiques

**DÉPENDANCES PRINCIPALES :**
* provider : État réactif
* shared_preferences : Persistance locale
* flutter_local_notifications : Notifications push locales (NOUVEAU v1.4.3)
* package_info_plus : Informations version app
* flutter_svg : Support SVG assets

--------------------------------------------------------------------------------
5. BUGS RÉSOLUS ET LEÇONS APPRISES
--------------------------------------------------------------------------------

**BUG 1 - rateTitle Écrasé lors de l'application de Presets :**
* Symptôme : rateTitle revenait à "Taux Personnalisé" après sélection d'un preset.
* Cause : setHourlyRate() écrasait systématiquement le rateTitle.
* Solution : Création de updateHourlyRateOnly() qui modifie uniquement le taux.
* Leçon : Séparer les méthodes de mise à jour selon les contextes d'utilisation.

**BUG 2 - Version Incorrecte dans Splash Screen :**
* Symptôme : v1.1 affiché alors que la version réelle était v1.2.
* Cause : Version hardcodée non mise à jour lors du bump.
* Solution : Recherche/remplacement systématique de la version hardcodée.
* Leçon : Éviter les valeurs hardcodées, utiliser pubspec.yaml comme source unique.

**BUG 3 - Footer Affichant Mauvaise Version :**
* Symptôme : Footer montrait v1.1.0.051025 au lieu de v1.2.0.121025.
* Cause : Logique basée sur date au lieu du build number de pubspec.yaml.
* Solution : Modification footer_bar.dart pour lire version complète depuis pubspec.
* Leçon : Suivre le build number de pubspec.yaml, pas de calcul date dynamique.

**BUG 4 - Cache Navigateur Empêchant Mise à Jour :**
* Symptôme : "Gains NETS" persistait malgré changements code vers rateTitle.
* Cause : Hot reload insuffisant pour changements de logique métier sur web.
* Solution : Kill all dart.exe processes + full app restart.
* Leçon : Sur web, privilégier full restart pour changements majeurs.

**BUG 5 - Désalignement Colonnes Multi-Timer :**
* Symptôme : Hauteurs variables entre timers causant décalage visuel.
* Cause : Textes dynamiques (montants, durées) de longueurs différentes.
* Solution : SizedBox avec hauteurs fixes pour toutes les sections.
* Leçon : Pour layouts multi-colonnes, imposer contraintes de hauteur strictes.

**BUG 6 - Calcul NET du SMIC Français Incorrect (V1.3.0) :**
* Symptôme : Mensuel NET affiché 1387.42€ au lieu de ~1398€ attendu.
* Cause : Taux NET de 77.0% au lieu de 77.6% (erreur de 0.6%).
* Solution : Correction netRatePercentage de 77.0 → 77.6 dans single_timer.dart.
* Impact : 1801.84€ BRUT × 0.776 = 1398.23€ NET (correction +10.81€/mois).
* Leçon : Précision décimale critique pour calculs financiers, vérifier sources officielles.

**BUG 7 - Estimations Annuelles Bloquées sur 35h/semaine (V1.3.0) :**
* Symptôme : Toutes les estimations calculées sur base 35h/sem (France) même pour autres pays.
* Cause : Constantes hardcodées hoursPerMonth=151.67, hoursPerYear=1820 dans timer_display.dart.
* Solution : Calculs dynamiques basés sur timer.weeklyHours : hoursPerMonth = (weeklyHours × 52) / 12, hoursPerYear = weeklyHours × 52.
* Impact : Correction majeure, ex: Suisse 42h/sem donne 2184h/an au lieu de 1820h/an (+20%).
* Leçon : Éviter constantes hardcodées pour données variables par contexte.

**BUG 8 - Application Incomplète des Presets Pays (V1.3.0) :**
* Symptôme : Sélection d'un pays ne mettait à jour que le taux horaire et la devise.
* Cause : _applyPreset() n'appliquait pas netRatePercentage ni weeklyHours.
* Solution : Extension _applyPreset() pour appeler setNetRatePercentage() et setWeeklyHours().
* Impact : Application cohérente de tous les paramètres pays (taux, devise, % NET, heures/sem).
* Leçon : Lors de l'ajout de nouveaux champs au modèle, vérifier tous les points d'application.

**BUG 9 - Animation Célébration Non Déclenchée en Mode Minuteur (V1.4.3) :**
* Symptôme : Animation smiley ne se lançait pas quand timer atteignait zéro en mode minuteur sur Flutter Chrome.
* Cause : Logique d'arrêt du timer défaillante, condition shouldStop incorrecte pour mode minuteur.
* Solution : Amélioration logique avec vérifications robustes (timer.isRunning && (isMinuteur ? remainingTime <= Duration.zero : false)).
* Impact : Animation déclenchée correctement dans tous les modes et plateformes.
* Leçon : Conditions booléennes complexes nécessitent parenthèses explicites et tests exhaustifs.

**BUG 10 - Chevauchement Footer Android (V1.4.3) :**
* Symptôme : Barres système Android chevauchaient le footer de l'app.
* Cause : Mode d'affichage par défaut laissant les barres système visibles.
* Solution : SystemChrome.setEnabledSystemUIMode(SystemUiMode.immersiveSticky) + android.notch_support="true".
* Impact : Expérience plein écran immersive sur Android sans chevauchement.
* Leçon : Configurations spécifiques plateforme nécessaires pour expérience optimale mobile.

================================================================================
FIN DU DOCUMENT DE RÉFÉRENCE
================================================================================